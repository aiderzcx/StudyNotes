高级篇

01. 使用指针接收方法的值的实例
	level: advanced
	只要值是可取址的，那在这个值上调用指针接收方法是没问题的。换句话说，在某些情况下不需要在有一个接收值的方法版本。
	然而并不是所有的变量是可取址的。Map的元素就不是。通过interface引用的变量也不是。
	
	type data struct {
	    name string
	}
	
	func (p *data) print() {  
	    fmt.Println("name:",p.name)
	}
	
	type printer interface {  
	    print()
	}
	
	func main() {  
	    d1 := data{"one"}
	    d1.print() //ok
	
	    var in printer = data{"two"} //error; data不是指针没有print方法，平常能调用是系统增加了取地址
	    in.print()
	
	    m := map[string]data {"x":data{"three"}}
	    m["x"].print() //error； map[x]不能取地址
	}

02. 更新Map的值
	level: advanced
	如果你有一个struct值的map，你无法更新单个的struct值。
	
	type data struct {  
	    name string
	}

	func main() {  
	    m := map[string]data {"x":{"one"}}
	    m["x"].name = "two" //error
	}
	Compile Error:
	/tmp/sandbox380452744/main.go:9: cannot assign to m["x"].name
	这个操作无效是因为map元素是无法取址的。

	而让Go新手更加困惑的是slice元素是可以取址的。
	type data struct {  
	    name string
	}

	func main() {  
	    s := []data {{"one"}}
	    s[0].name = "two" //ok
	    fmt.Println(s)    //prints: [{two}]
	}
	
	注意在不久之前，使用编译器之一（gcc go）是可以更新map的元素值的，但这一行为很快就被修复了 :-)
	它也被认为是Go 1.3的潜在特性。在那时还不是要急需支持的，但依旧在todo list中。

	第一个有效的方法是使用一个临时变量。
	func main() {  
	    m := map[string]data {"x":{"one"}}
	    r := m["x"]
	    r.name = "two"
	    m["x"] = r
	    fmt.Printf("%v",m) //prints: map[x:{two}]
	}

	另一个有效的方法是使用指针的map。
	func main() {  
	    m := map[string]*data {"x":{"one"}}
	    m["x"].name = "two" //ok
	    fmt.Println(m["x"]) //prints: &{two}
	}
	

03. "nil" Interfaces和"nil" Interfaces的值
	level: advanced
	这在Go中是第二最常见的技巧，因为interface虽然看起来像指针，但并不是指针。
	interface变量仅在类型和值为“nil”时才为“nil”。

	interface的类型和值会根据用于创建对应interface变量的类型和值的变化而变化。
	当你检查一个interface变量是否等于“nil”时，这就会导致未预期的行为。
	
	func main() {  
	    var data *byte
	    var in interface{}
	
	    fmt.Println(data,data == nil) //prints: <nil> true
	    fmt.Println(in,in == nil)     //prints: <nil> true
	
	    in = data
	    fmt.Println(in,in == nil)     //prints: <nil> false
	    //'data' is 'nil', but 'in' is not 'nil'
	}
	
	当你的函数返回interface时，小心这个陷阱。

04. 栈和堆变量（内存逃逸，决定位置）
	level: advanced
	你并不总是知道变量是分配到栈还是堆上。在C++中，使用 new创建的变量总是在堆上。
	在Go中，即使是使用 new()或者 make()函数来分配，变量的位置还是由编译器决定。
	编译器根据变量的大小和“泄露分析”的结果来决定其位置。这也意味着在局部变量上返回引用是没问题的，
	而这在C或者C++这样的语言中是不行的。

	如果你想知道变量分配的位置，在“go build”或“go run”上传入“-m“ gc标志（即， go run -gcflags -m app.go）。

05. GOMAXPROCS, 并发, 和并行(1.5版本以前是，以后不是了)
	level: advanced
	默认情况下，Go仅使用一个执行上下文/OS线程（在当前的版本）。这个数量可以通过设置 GOMAXPROCS来提高。

	一个常见的误解是， GOMAXPROCS表示了CPU的数量，Go将使用这个数量来运行goroutine。
	而runtime.GOMAXPROCS()函数的文档让人更加的迷茫。 
	GOMAXPROCS变量描述（https://golang.org/pkg/runtime/）所讨论OS线程的内容比较好。

	你可以设置 GOMAXPROCS的数量大于CPU的数量。 GOMAXPROCS的最大值是256。
	
	func main() {  
	    fmt.Println(runtime.GOMAXPROCS(-1)) //prints: 1
	    fmt.Println(runtime.NumCPU())       //prints: 1 (on play.golang.org)
	    runtime.GOMAXPROCS(20)
	    fmt.Println(runtime.GOMAXPROCS(-1)) //prints: 20
	    runtime.GOMAXPROCS(300)
	    fmt.Println(runtime.GOMAXPROCS(-1)) //prints: 256
	}
	
06. 读写操作的重排顺序
	level: advanced
	Go可能会对某些操作进行重新排序，但它能保证在一个goroutine内的所有行为顺序是不变的。
	然而，它并不保证多goroutine的执行顺序。

	如果你需要在多goroutine内放置读写顺序的变化，你将需要使用channel，或者使用"sync"包构建合适的结构体。

07. 优先调度 （协程不能抢占，轮训，只能主动放弃）
	level: advanced
	有可能会出现这种情况，一个无耻的goroutine阻止其他goroutine运行。
	当你有一个不让调度器运行的 for循环时，这就会发生。

	func main() {  
	    done := false
	
	    go func(){
	        done = true
	    }()
	
	    for !done {
	    }
	    fmt.Println("done!")
	}
	
	for循环并不需要是空的。只要它包含了不会触发调度执行的代码，就会发生这种问题。
	调度器会在GC、“go”声明、阻塞channel操作、阻塞系统调用和lock操作后运行。它也会在非内联函数调用后执行。
	
	func main() {  
	    done := false
	
	    go func(){
	        done = true
	    }()
	
	    for !done {
	        fmt.Println("not done!") //not inlined
	    }
	    fmt.Println("done!")
	}
	要想知道你在 for循环中调用的函数是否是内联的，
	你可以在“go build”或“go run”时传入“-m” gc标志（如， go build -gcflags -m）。

	另一个选择是显式的唤起调度器。你可以使用“runtime”包中的 Goshed()函数。
	func main() {  
	    done := false
	
	    go func(){
	        done = true
	    }()
	
	    for !done {
	        runtime.Gosched()
	    }
	    fmt.Println("done!")
	}